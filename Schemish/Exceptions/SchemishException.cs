using System;
using static Schemish.Utils;

namespace Schemish.Exceptions {
  /// <summary>
  /// An exception which is internal to Schemish.
  /// </summary>
  /// <remarks>
  /// This exception is generated by Schemish internals to differentiate between C# programmer error
  /// (e.g. accidentally passing a <see cref="Cons"/> object instead of its <c>car</c>) and a
  /// <em>Schemish</em> programmer error (e.g. passing a string to a procedure which expects an
  /// integer). A <see cref="SchemishException"/> encompasses all errors of the latter type.
  /// </remarks>
  public sealed class SchemishException : Exception {
    /// <summary>
    /// Initializes a new instance of the <see cref="SchemishException"/> class.
    /// </summary>
    public SchemishException() { }

    /// <summary>
    /// Initializes a new instance of the <see cref="SchemishException"/> class with a specified
    /// error message.
    /// </summary>
    /// <param name="message">The message that describes the error.</param>
    public SchemishException(string message)
        : base(message) { }

    /// <summary>
    /// Initializes a new instance of the <see cref="SchemishException"/> class with a specified
    /// error message and a reference to the inner exception that is the cause of this exception.
    /// </summary>
    /// <param name="message">The message that describes the error.</param>
    /// <param name="innerException">The exception that is the cause of the current exception, or a
    /// <c>null</c> reference (Nothing in Visual Basic) if no inner exception is specified.</param>
    public SchemishException(string message, Exception innerException)
        : base(message, innerException) { }

    /// <summary>
    /// Returns an exception describing an incorrect arity.
    /// </summary>
    /// <param name="actual">The value actually accepted.</param>
    /// <param name="desired">A string describing the required arity, e.g. "1 or 2".</param>
    /// <returns>The exception.</returns>
    public static SchemishException IncorrectArity(int actual, string desired) {
      return new SchemishException(
          $"Wrong number of arguments {actual}, expecting {desired}.");
    }

    /// <summary>
    /// Returns an exception describing an illegal conversion.
    /// </summary>
    /// <param name="actual">The value to be converted.</param>
    /// <param name="desired">A string describing the required type, e.g. "number".</param>
    /// <returns>The exception.</returns>
    public static SchemishException IllegalConversion(object? actual, string desired) {
      string actualType = PrintType(actual);
      return new SchemishException(
          $"Invalid conversion from {actualType} `{PrintExpr(actual)}' to {desired}.");
    }

    /// <summary>
    /// Returns an exception describing a type mismatch.
    /// </summary>
    /// <param name="actual">The value whose type is incorrect.</param>
    /// <param name="desired">A string describing the required type, e.g. "number".</param>
    /// <returns>The exception.</returns>
    public static SchemishException WrongType(object? actual, string desired) {
      string actualType = PrintType(actual);
      return new SchemishException(
          $"Value `{PrintExpr(actual)}' has incorrect type {actualType} (expected {desired}).");
    }
  }
}
